name: tools-iuc
on:
  workflow_call:
    inputs:
      # TODO using this will exclude tools from the skip list
      repository-list:
        description: 'list of repositories to test'
        required: true
        type: string
      galaxy-head-sha:
        description: 'hash of the latest commit in the Galaxy repo'
        required: true
        type: string
      python-version-list:
        description: 'Python versions (stringified JSON array)'
        default: "[\"3.7\"]"
        required: false
        type: string
    # secrets:
    #   PAT:
    #     required: false
jobs:
  autoupdate:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-version-list) }} 
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ github.token }}
        fetch-depth: 0

    # - uses: webfactory/ssh-agent@v0.4.1
    #   with:
    #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ inputs.galaxy-head-sha }}
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ inputs.galaxy-head-sha }}

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        
        echo "Installing planemo..."
        pip3 install wheel planemo

        # # git credentials
        git config --global user.email "m.bernt@ufz.de"
        git config --global user.name "planemo-autoupdate"
        echo ${{ github.token }} > token.txt
        gh auth login --with-token < token.txt
        
        BASEDIR=`pwd`
        echo "BASEDIR $BASEDIR/"

        # cd tools-iuc
        # echo "Adding upstream..."
        # git remote add upstream https://github.com/galaxyproject/tools-iuc.git

        echo "Getting git remote..."
        git remote -v

        echo "Pulling latest..."
        git fetch --all

        # TODO tool-collections (problem is that branch tool-collections/sanmtools/samtools-XYZ can not be crated, if
        # tool-collections/samtools already exists)
        REPOS=$(echo "${{ inputs.repository-list }}" | grep "^tools/")
        
        echo "PR list"
        gh pr list --limit 10000
        
        for REPO in $REPOS; do
          # git checkout upstream/master
          echo "Processing $REPO"
          # # checkout branch, create if it doesn't exist
          # if [[ $(gh pr list --limit 10000 | grep autoupdate/$REPO.\s*OPEN) ]]
          # then
          #   echo "PR exists, we will checkout the branch and add to it"
          #   git checkout --track origin/autoupdate/$REPO
          # else
          #   if [[ $(git branch -a --list origin/autoupdate/$REPO) ]]
          #   then
          #     echo "Branch exists without an open PR - deleting"
          #     git push origin --delete autoupdate/$REPO
          #   fi
          #   echo "Creating branch and checking out"
          #   git checkout -b autoupdate/$REPO master
          # fi
          # echo "Checked out branch $(git branch --show-current)"
          # echo "Running autoupdate command..."
          # planemo autoupdate . --skiplist .autoupdate_skip $REPO > $BASEDIR/autoupdate.log
          # rm -f tool_test_output.*

          # if [[ $(git diff) ]]
          # then
          #   TITLE=$(python3 $BASEDIR/autoupdate_pr_text.py --repo $REPO --log $BASEDIR/autoupdate.log --shed $REPO/.shed.yml --out $BASEDIR/body.txt)

          #   # first check if a closed PR for the same branch with the same title - if so, we don't continue
          #   if [[ ! $(gh pr list -s closed --search "head:autoupdate/$REPO ^$TITLE\$ in:title" --limit 1000) ]]
          #   then

          #     echo "Committing..."
          #     git commit $REPO -m "$TITLE" --quiet

          #     echo "Push branch to remote..."
          #     git push --set-upstream origin autoupdate/$REPO --quiet

          #     OLD_TITLE=$(gh pr list --limit 1000 | grep autoupdate/$REPO | cut -f 2)
          #     if [[ $OLD_TITLE ]] # just need to update PR title
          #     then
          #       echo "Need to update title"
          #       if [[ $OLD_TITLE == *\) ]] # older PRs
          #       then
          #         NEW_TITLE=$(echo $OLD_TITLE | cut --complement -f 4 -d ' ' && echo  " to " && echo $TITLE | cut -f 7 -d ' ')
          #       else # newer PRs
          #         NEW_TITLE=$(echo $OLD_TITLE | cut --complement -f 7 -d ' ' && echo $TITLE | cut -f 7 -d ' ')
          #       fi
          #       PR_NUMBER=$(gh pr list --limit 1000 | grep autoupdate/$REPO | cut -f 1gh pr 
          #       gh pr edit $PR_NUMBER -t "$NEW_TITLE" --add-label
          #     else # we need to create a PR
          #       echo "Creating a PR..."
          #       gh pr create --base master --title "$TITLE" --body-file $BASEDIR/body.txt --label "autoupdate"
          #       # --repo bernt-matthias/tools-iuc 
          #       #  --head autoupdate/$REPO 
          #       break
          #     fi
          #   fi
          # fi
          # # clean up for the next tool
          git checkout -- $REPO
        done
    - name: Create comment
      if: ${{ github.event.client_payload.slash_command.command == 'run-autoupdate' }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        token: ${{ github.token }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
        body: |
          Autoupdate finished