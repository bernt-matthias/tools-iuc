<tool id="meryl_count_kmers" name="Meryl: count-kmers" version="@TOOL_VERSION@+@GALAXY_TOOL_VERSION@@SUFFIX_VERSION@" profile="20.01">
    <description>a genomic k-mer counter and sequence utility</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <xrefs>
        <xref type="bio.tools">meryl</xref>
    </xrefs>
    <expand macro="edam_ontology"/>
    <expand macro="requirements"/>
    <version_command>meryl --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
        export GALAXY_MEMORY_GB=\$((\${GALAXY_MEMORY_MB:-8192}/1024)) &&
    #if $options_kmer_size.kmer_size == 'estimate'
        #from math import log
        #set size=int(log(int($options_kmer_size.genome_size)*(1-float($options_kmer_size.collision_rate))/float($options_kmer_size.collision_rate))/log(4))
    #elif $options_kmer_size.kmer_size == 'provide'
        #set size=$options_kmer_size.input_kmer_size
    #end if
    ln -s '$input_reads' ./input.${operation_type.input_reads.ext} &&

    meryl
    $count_operations
    k=$size
    memory=\$GALAXY_MEMORY_GB
    threads=\${GALAXY_SLOTS:-1}
    ./input.${operation_type.input_reads.ext}
    output read-db.meryl &&
    echo 'K-mer size: ${size}' &&
    tar -zcf read-db.meryldb read-db.meryl]]></command>
    <inputs>
        <param name="count_operations" type="select" label="Count operations" help="Select an operation to be executed">
            <option value="count">Count: count the occurrences of canonical k-mers</option>
            <option value="count-forward">Count-forward: count the occurreces of forward k-mers</option>
            <option value="count-reverse">Count-reverse: count the occurreces of reverse k-mers</option>
        </param>
        <param name="input_reads" type="data" format="fastq,fastq.gz,fasta,fasta.gz" label="Input sequences" help="Select your reads in FASTA/FASTQ format."/>
        <conditional name="options_kmer_size">
            <param name="kmer_size" type="select" label="K-mer size selector">
                <option value="provide">Set a k-mer size</option>
                <option value="estimate">Estimate the best k-mer size</option>
            </param>
            <when value="provide">
                <param name="input_kmer_size" type="integer" min="1" max="50" value="" label="K-mer size" help="For a human genome, the best k-mer size is k=21 for both haploid (3.1G) or diploid (6.2G).."/>
            </when>
            <when value="estimate">
                <param name="genome_size" type="integer" min="1000" max="70000000000" value="1000" label="Genome size" help="Haploid genome size or diploid genome size, depending on what we evaluate. In bp. Only required if the k-mer size is not provided."/>
                <param name="collision_rate" type="float" min="0.0001" max="0.01" value="0.001" label="Tolerable collision rate" help="Tolerable collision rate. By default is 0.001."/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="read_db" format="meryldb" from_work_dir="read-db.meryldb" label="${tool.name} on ${on_string}: read-db.meryldb">
            </data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="options_kmer_size">
                <param name="kmer_size" value="provide"/>
                <param name="input_kmer_size" value="7"/>
            </conditional>
            <param name="input_reads" value="child.fasta"/>
            <param name="count_operation" value="count"/>
            <output name="read_db" ftype="meryldb">
                <assert_contents>
                    <has_size value="22152" delta="1000"/>
                </assert_contents>
            </output>
            <assert_stdout>
                <has_line line="K-mer size: 7"/>
            </assert_stdout>
        </test>
        <test expect_num_outputs="1">
            <conditional name="options_kmer_size">
                <param name="kmer_size" value="provide"/>
                <param name="input_kmer_size" value="7"/>
            </conditional>
            <param name="input_reads" value="child.fasta.gz" ftype="fasta.gz"/>
            <param name="count_operation" value="count"/>
            <output name="read_db" ftype="meryldb">
                <assert_contents>
                    <has_size value="22200" delta="1000"/>
                </assert_contents>
            </output>
            <assert_stdout>
                <has_line line="K-mer size: 7"/>
            </assert_stdout>
        </test>
    </tests>
    <help>

.. class:: infomark

**Purpose**

Meryl is the k-mer counter. It is built into the Celera assembler and is also available as a stand-alone application.
Meryl uses a sorting-based approach that sorts the k-mers in lexicographical order.

In addition of generating count-databases, meryl can perform simple operations on it. 

-----

.. class:: infomark

**Basic functions**

The functions that meryl includes are described below: 

    ::

        COUNT OPERATIONS
        - Count: count the occurrences of canonical k-mers
        - Count-forward: count the occurreces of forward k-mers
        - Count-reverse: count the occurreces of reverse k-mers
        FILTERING OPERATIONS
        - Less-than: return k-mers that occur fewer than N times in the input
        - Greater-than: return k-mers that occur more than N times in the input
        - Equal-to: return k-mers that occur exactly N times in the input
        - Not-equal-to: return k-mers that do not occur exactly N times in the input
        ARITHMETIC OPERATIONS
        - Increase: add x to the count of each k-mer
        - Decrease: subsctract x from the count of each k-mer
        - Multiply: multiply the count of each k-mer by x
        - Divide: divide the count of each k-mer by x
        - Divide-round: divide the count of each k-mer by x and round th results
        - Modulo: set the count of each k-mer to the remainder of the count divided by x
        OPERATIONS ON SETS
        - Union-min: return k-mers that occur in any input, set the count to the minimum count
        - Union-max: return k-mers that occur in any input, set the count to the maximum count
        - Union-sum: return k-mers that occur in any input, set the count to the sum of the counts
        - Intersect: return k-mers that occur in all inputs, set the count to the count in the first input
        - Intersect-min: return k-mers that occur in all inputs, set the count to the minimum count
        - Intersect-max: return k-mers that occur in all inputs, set the count to the maximum count
        - Intersect-sum: return k-mers that occur in all inputs, set the count to the sum of the counts
        - Subtract: return k-mers that occur in the first input, subtracting counts from the other inputs
        - Difference: return k-mers that occur in the first input, but none of the other inputs
        - Symmetric-difference: return k-mers that occur in exactly one input

-----

.. class:: infomark

**Additional function: build hap-mers dbs for trios**

In addition of the basic operations, this wrapper allows to build the hap-mers databases for trios, in accordance
with `merqury's recommended guidelines. &lt;https://github.com/marbl/merqury/wiki/1.-Prepare-meryl-dbs#3-build-hap-mer-dbs-for-trios&gt;`_

        </help>
    <expand macro="citations"/>
</tool>