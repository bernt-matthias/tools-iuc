<tool id="stacks2_kmerfilter" name="Stacks2: kmer filter" version="@STACKS_VERSION@+galaxy@WRAPPER_VERSION@">
<description>Identify PCR clones</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_cmd"/>
    <command detect_errors="aggressive"><![CDATA[
#if $input_type.input_type_select == "single"
    #if $input_type.samples.is_of_type('fastqsanger')
        #set $ext = ".fq"
        #set inputype = "fastq"
    #else
        #set $ext = ".fq.gz"
        #set inputype = "gzfastq"
    #end if
    ln -s '$input_type.samples' forward$ext &&
#elif $input_type.input_type_select == "pair"
    #if $input_type.samples.forward.is_of_type('fastqsanger')
        #set $ext = ".fq"
        #set inputype = "fastq"
    #else
        #set $ext = ".fq.gz"
        #set inputype = "gzfastq"
    #end if
    ln -s '$input_type.samples.forward' forward$ext &&
    ln -s '$input_type.samples.reverse' reverse$ext &&
#end if

mkdir outputs

&&

kmer_filter
#if $input_type.input_type_select == 'single':
    -f forward$ext
#else
    -1 forward$ext
    -2 reverse$ext
#end if
## TODO    $options_kmer_char.read_k_freq
-i $inputype
-o outputs
$capture
-y fastq
$options_filtering.rare
$options_filtering.abundant
--k_len $options_filtering.k_len
--max_k_freq $options_advanced_filtering.max_k_freq
#if str($options_advanced_filtering.min_lim)!="":
    --min_lim $options_advanced_filtering.min_lim
#end if
#if str($options_advanced_filtering.max_lim)!="":
    --max_lim $options_advanced_filtering.max_lim
#end if
#if str($options_normalization.normalize)!="":
    --normalize $options_normalization.normalize
#end if
#if $options_kmer_char.write_k_freq
    --read_k_freq $kfreq
#end if
$options_kmer_char.k_dist
#if $options_kmer_char.k_dist
    | sed 's/KmerFrequency/# KmerFrequency/' > $kfreqdist
#end if

## move outputs such that Galaxy can find them
## if filtering is on then ...filt...fq[.gz] is created
## if normalization is on then ...norm...fq[.gz] is created
## if both are active then both files are created, but only norm is needed
#if str($options_filtering.rare)!="" or str($options_filtering.abundant)!="" or str($options_normalization.normalize)!="":
    #if str($options_normalization.normalize)!="":
        #set infix="norm"
    #else
        #set infix="fil"
    #end if
    
    #if $input_type.input_type_select == "single"
        && mv outputs/forward.${infix}.fq '$clean'
    #else
        && mv outputs/forward.${infix}.1.fq '$clean_pair.forward'
        && mv outputs/reverse.${infix}.2.fq '$clean_pair.reverse'
    #end if
    
    #if $capture:
    #if $input_type.input_type_select == "single"
        && mv outputs/forward.discards.fq '$discarded'
    #else
        && mv outputs/forward.discards.fq '$discarded_pair.forward'
        && mv outputs/reverse.discards.fq '$discarded_pair.reverse'
    #end if
    #end if

#end if

    ]]></command>
    <inputs>
        <expand macro="fastq_input_pair_bc"/>
	<param name="capture" type="boolean" checked="false" truevalue="-D" falsevalue="" argument="-D" label="Capture discarded reads to a file" />
        <section name="options_filtering" title="Filtering options" expanded="False">
            <param argument="--rare" type="boolean" checked="false" truevalue="--rare" falsevalue="" label="turn on filtering based on rare k-mers" />
            <param argument="--abundant" type="boolean" checked="false" truevalue="--abundant" falsevalue="" label="turn on filtering based on abundant k-mers" />
            <param argument="--k_len" type="integer" value="15" label="k-mer size" />
        </section>
        <section name="options_advanced_filtering" title="Advanced fitering options" expanded="False">
            <param argument="--max_k_freq" type="integer" value="20000" label="number of times a kmer must occur to be considered abundant" />
            <param argument="--min_lim" type="integer" value="" optional="true" label="number of rare kmers occuring in a row required to discard a read" help="(default: 80% of the k-mer length)." />
            <param argument="--max_lim" type="integer" value="" optional="true" label="number of abundant kmers required to discard a read" help="(default: 80% of the k-mers in a read)" />
        </section>
        <section name="options_normalization" title="Normalization options" expanded="False">
            <param argument="--normalize" type="integer" value="" optional="true" label="normalize read depth according to k-mer coverage" />
        </section>
        <section name="options_kmer_char" title="Characterizing K-mers options" expanded="False">
            <param argument="--write_k_freq" type="boolean" checked="false" truevalue="--write_k_freq" falsevalue="" label="write kmers along with their frequency of occurrence and exit" />
            <param argument="--k_dist" type="boolean" checked="false" truevalue="--k_dist" falsevalue="" label="print k-mer frequency distribution and exit" />
        </section>
	<!--<section name="options_advanced_input" title="Advanced input options" expanded="False">
            <param argument="\-\-read_k_freq" type="boolean" checked="false" truevalue="\-\-read_k_freq" falsevalue="" label="read a set of kmers along with their frequencies of occurrence instead of reading raw input files" />
	</section>-->
    </inputs>
    <outputs>
        <data name="clean" format="fastqsanger" label="${tool.name} on ${on_string}">
            <filter>input_type['input_type_select'] == 'single' and not options_kmer_char['k_dist']</filter>
        </data>
        <collection name="clean_pair" type="paired" label="${tool.name} on ${on_string}"> 
            <filter>input_type['input_type_select'] == 'pair' and not options_kmer_char['k_dist']</filter>
        </collection>
	
	<data name="discarded" format="fastqsanger" label="${tool.name} on ${on_string}: discarded reads">
            <filter>capture and input_type['input_type_select'] == 'single' and not options_kmer_char['k_dist']</filter>
        </data>
        <collection name="discarded_pair" type="paired" label="${tool.name} on ${on_string}: discarded reads"> 
            <filter>capture and input_type['input_type_select'] == 'pair' and not options_kmer_char['k_dist']</filter>
        </collection>
	
        <data format="tabular" name="kfreq" label="${tool.name} on ${on_string} kmer frequencies">
            <filter>options_kmer_char['write_k_freq']</filter>
        </data>
        <data format="tabular" name="kfreqdist" label="${tool.name} on ${on_string} kmer frequency distribution">
            <filter>options_kmer_char['k_dist']</filter>
        </data>
    </outputs>
    <tests>
        <!-- default output for filtering -->
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="single" />
                <param name="samples" ftype="fastqsanger.gz" value="clonefilter/R1_0001.1.fq.gz" />
            </conditional>
            <param name="rare" value="--rare"/>
            <param name="abundant" value="--abundant" />
            <param name="k_len" value="16" />
            <assert_command>
                <has_text text="--rare" />
                <has_text text="--abundant" />
                <has_text text="--k_len 16" />
            </assert_command>
            <output name="clean" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.single.gz"/>
        </test>
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="pair" />
                <param name="samples">
                    <collection type="paired">
                        <element name="forward" value="clonefilter/R1_0001.1.fq.gz" />
                        <element name="reverse" value="clonefilter/R2_0001.2.fq.gz" />
                    </collection>
                </param>
            </conditional>
	    <param name="capture" value="-D" />
            <param name="normalize" value="1" />
            <assert_command>
                <has_text text="--normalize 1" />
            </assert_command>
            <output_collection name="clean_pair" type="paired">
                <element name="forward" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.gz" />
                <element name="reverse" compare="sim_size" file="clonefilter/Removed2_0001.2.2.fq.gz" />
            </output_collection>
	    <output_collection name="discarded_pair" type="paired">
                <element name="forward" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.gz" />
                <element name="reverse" compare="sim_size" file="clonefilter/Removed2_0001.2.2.fq.gz" />
	    </output_collection>
        </test>
        <!-- kfreq output -->
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="single" />
                <param name="samples" ftype="fastqsanger.gz" value="clonefilter/R1_0001.1.fq.gz" />
            </conditional>
            <section name="options_kmer_char">
                <param name="write_k_freq" value="--write_k_freq" />
            </section>
            <output name="kfreq" file="kmerfilter/kfreq.tsv"/>
        </test>
        <!-- kfreqdist output -->
	<test>
            <conditional name="input_type">
                <param name="input_type_select" value="single" />
                <param name="samples" ftype="fastqsanger.gz" value="clonefilter/R1_0001.1.fq.gz" />
            </conditional>
            <section name="options_kmer_char">
                <param name="k_dist" value="--k_dist" />
            </section>
            <output name="kfreqdist" file="kmerfilter/kfreqdist.tsv"/>
        </test>
    </tests>
    <help>
<![CDATA[
.. class:: infomark

Allows paired or single-end reads to be filtered according to the number or rare or abundant kmers they contain. Useful for both RAD datasets as well as randomly sheared genomic or transcriptomic data. 

@STACKS_INFOS@
]]>
    </help>
    <expand macro="citation" />
</tool>
