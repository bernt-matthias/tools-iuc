<tool id="stacks2_clonefilter" name="Stacks2: clone filter" version="@STACKS_VERSION@+galaxy@WRAPPER_VERSION@">
<description>Identify PCR clones</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="version_cmd"/>
    <command detect_errors="aggressive"><![CDATA[
#if $input_type.input_type_select == "single"
    #if $input_type.samples.is_of_type('fastqsanger')
        #set $ext = ".fq"
        #set inputype = "fastq"
    #else
        #set $ext = ".fq.gz"
        #set inputype = "gzfastq"
    #end if

    ln -s '$input_type.samples' R1$ext &&
#else
    #if $input_type.samples.forward.is_of_type('fastqsanger')
        #set $ext = ".fq"
        #set inputype = "fastq"
    #else
        #set $ext = ".fq.gz"
        #set inputype = "gzfastq"
    #end if

    ln -s '$input_type.samples.forward' R1$ext &&
    ln -s '$input_type.samples.forward' R2$ext &&
#end if

mkdir outputs

&&

clone_filter
#if $input_type.input_type_select == 'single':
    -f R1$ext
#else
    -1 R1$ext
    -2 R2$ext
#end if

-i $inputype

-o outputs
$capture
$input_type.barcode_encoding
#if $oligo_len_1
    --oligo_len_1 $oligo_len_1
#end if
#if $oligo_len_2
    --oligo_len_2 $oligo_len_2
#end if
$retain_oligo
## only supports fastq.gz output since the 
## the program outputs empty files for fasta/fastq 
-y gzfastq

## move outputs such that Galaxy can find them
#if $input_type.input_type_select == "single"
    && mv outputs/R1.fq.gz '$clean'
#else
    && mv outputs/R1.1.fq.gz '$clean_pair.forward'
    && mv outputs/R2.2.fq.gz '$clean_pair.reverse'
#end if
    ]]></command>
    <inputs>
        <expand macro="fastq_input_pair_bc"/>
        <param name="capture" type="boolean" checked="false" truevalue="-D" falsevalue="" argument="-D" label="Capture discarded reads to a file" />
        <param name="oligo_len_1" type="integer" value="0" label="length of the single-end oligo sequence in data set"/>
        <param name="oligo_len_2" optional="true" type="integer" label="length of the paired-end oligo sequence in data set"/>
        <param argument="--retain_oligo" type="boolean" checked="false" truevalue="--retain_oligo" falsevalue="" label="do not trim off the random oligo sequence (if oligo is inline)" />
    </inputs>
    <outputs>
        <data format="fastqsanger.gz" name="clean" from_work_dir="outputs/R1.fq.gz" label="${tool.name} on ${on_string}">
            <filter>input_type['input_type_select'] == 'single'</filter>
        </data>
        <collection name="clean_pair" type="paired" label="${tool.name} on ${on_string}"> 
            <filter>input_type['input_type_select'] == 'pair'</filter>
        </collection>
    </outputs>
    <tests>
        <!-- single end, defaults-->
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="single" />
                <param name="samples" ftype="fastqsanger.gz" value="clonefilter/R1_0001.1.fq.gz" />
            </conditional>
            <param name="oligo_len_1" value="6" />
            <output name="clean" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.single.gz"/>
        </test>
        <!-- single end, alt BCencoding, capture-->
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="single" />
                <param name="samples" ftype="fastqsanger.gz" value="clonefilter/R1_0001.1.fq.gz" />
                <param name="barcode_encoding" value="--index_null" />
            </conditional>
            <param name="capture" value="-D" />
            <param name="oligo_len_1" value="6" />
            <assert_command>
                <has_text text="-D" />
            </assert_command>
            <output name="clean" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.gz"/>
        </test>
        <!-- paired end, defaults-->
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="pair" />
                <param name="samples">
                    <collection type="paired">
                        <element name="forward" value="clonefilter/R1_0001.1.fq.gz" />
                        <element name="reverse" value="clonefilter/R2_0001.2.fq.gz" />
                    </collection>
                </param>
            </conditional>
            <param name="oligo_len_1" value="6" />
            <output_collection name="clean_pair" type="paired">
                <element name="forward" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.gz" />
                <element name="reverse" compare="sim_size" file="clonefilter/Removed2_0001.2.2.fq.gz" />
            </output_collection>
        </test>
        <!-- paired end, non defaults -->
        <test>
            <conditional name="input_type">
                <param name="input_type_select" value="pair" />
                <param name="samples">
                    <collection type="paired">
                        <element name="forward" value="clonefilter/R1_0001.1.fq.gz" />
                        <element name="reverse" value="clonefilter/R2_0001.2.fq.gz" />
                    </collection>
                </param>
            </conditional>
            <param name="oligo_len_1" value="6" />
            <param name="capture" value="-D" />
            <param name="retain_oligo" value="--retain_oligo" />
            <assert_command>
                <has_text text="--retain_oligo" />
            </assert_command>
            <output_collection name="clean_pair" type="paired">
                <element name="forward" compare="sim_size" file="clonefilter/Removed1_0001.1.1.fq.gz" />
                <element name="reverse" compare="sim_size" file="clonefilter/Removed2_0001.2.2.fq.gz" />
            </output_collection>
        </test>
    </tests>
    <help>
<![CDATA[
.. class:: infomark

The clone_filter program is designed to identify PCR clones.

@STACKS_INFOS@
]]>
    </help>
    <expand macro="citation" />
</tool>
