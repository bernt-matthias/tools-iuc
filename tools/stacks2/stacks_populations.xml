<tool id="stacks2_populations" name="Stacks2: populations" version="@STACKS_VERSION@+galaxy@WRAPPER_VERSION@">
    <description>analyze a population of individual samples ('populations' program)</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <command><![CDATA[
#import re

mkdir stacks_inputs stacks_outputs

&&

#if str($options_usage.input_type) == 'stacks'
    #for $input_file in $options_usage.input_col
        #set $filename = str($input_file.element_identifier)
        #if $filename == "catalog.calls" or $filename == "catalog.fa.gz":
            ln -s '${input_file}' 'stacks_inputs/${filename}' &&
        #elif $filename == "catalog.calls.vcf":
            gzip -c '${input_file}' > stacks_inputs/catalog.calls &&
        #end if
    #end for
#else if str($options_usage.input_type) == 'vcf'
    ln -s '$options_usage.input_vcf' 'stacks_inputs/input.vcf' &&
#end if

populations

-t \${GALAXY_SLOTS:-1}

#if str($options_usage.input_type) == 'vcf'
    -V stacks_inputs/input.vcf
#else
    -P stacks_inputs
#end if
-O stacks_outputs

#if str($popmap) != 'None':
    -M '$popmap'
#end if
#if str($batch_size) != '':
    -batch_size '$batch_size'
#end if

## Data filtering

-p $options_filtering.minpop
-r $options_filtering.minperc
--min_maf $options_filtering.minminor
--min_mac $options_filtering.min_mac
#if str($options_filtering.max_obs_het)
    --max_obs_het $options_filtering.max_obs_het
#end if
## deprecated https://groups.google.com/forum/#!msg/stacks-users/jdC7gw_MuK4/1v0FG3u7AwAJ
## #if str($options_filtering.lnl)
##     --lnl_lim $options_filtering.lnl
## #end if
$options_filtering.filter_single_snp
#if $options_filtering.blacklist
    -B '$options_filtering.blacklist'
#end if
#if $options_filtering.whitelist
    -W '$options_filtering.whitelist'
#end if

## Merging and Phasing:
#if str($merge_phase.enzyme) != '':
    -e $merge_phase.enzyme
#end if
$merge_phase.merge_sites
--merge_prune_lim $merge_phase.merge_prune_lim

## Locus stats:
$locus_stats.hwe

## Fstats
#if str($fstats_conditional.fstats) != 'no':
    --fstats
    #if str( $fstats_conditional.correction_select.correction ) != "no_corr"
        --fst_correction $fstats_conditional.correction_select.correction
        --p_value_cutoff $fstats_conditional.correction_select.pcutoff
    #end if
#end if

## Kernel-smoothing algorithm:
$kernel_smoothing.options_kernel.kernel
#if str($kernel_smoothing.options_kernel.kernel)!='':
    --sigma $kernel_smoothing.options_kernel.sigma
#end if
#if $kernel_smoothing.bootstrap_resampling_mode.bootstrap_all
    --bootstrap
#else
    $kernel_smoothing.bootstrap_resampling_mode.bootstrap_pifis
    $kernel_smoothing.bootstrap_resampling_mode.bootstrap_fst
    $kernel_smoothing.bootstrap_resampling_mode.bootstrap_div
    $kernel_smoothing.bootstrap_resampling_mode.bootstrap_phist
#end if

#if $kernel_smoothing.bootstrap_resampling_mode.bootstrap_all or $kernel_smoothing.bootstrap_resampling_mode.bootstrap_pifis or $kernel_smoothing.bootstrap_resampling_mode.bootstrap_fst or $kernel_smoothing.bootstrap_resampling_mode.bootstrap_div or $kernel_smoothing.bootstrap_resampling_mode.bootstrap_phist:
    #if str($kernel_smoothing.bootstrap_reps)
        --bootstrap_reps $kernel_smoothing.bootstrap_reps
    #end if
    #if $kernel_smoothing.bootstrap_wl
        --bootstrap_wl '$kernel_smoothing.bootstrap_wl'
    #end if
#end if

## File output options:

$populations_output.ordered_export
$populations_output.fasta_loci
$populations_output.fasta_samples
$populations_output.vcf
$populations_output.genepop
$populations_output.structure
$populations_output.radpainter
##$populations_output.phase
##$populations_output.fastphase
$populations_output.plink
##$populations_output.hzar
$populations_output.phylip
$populations_output.phylip_var
##$populations_output.phylip_var_all
##$populations_output.treemix
$populations_output.no_hap_exports
$populations_output.fasta_samples_raw

## Additional options:

$advanced_options.log_fst_comp

## populations outputs log info to stdout for vcf input 
## for gstacks input it creates stacks_output/population.log
## in the latter case we take the log file
## also for vcf input the output files are named input.p.... 
## instead of populations...

#if str($options_usage.input_type) == 'vcf'
    > $output_log
    && find stacks_outputs -type f -iname "input.p*" | while read file; do mv "\$file" "\$(echo \$file | sed 's/\/input.p/\/populations/;')"; done
#else
    && mv stacks_outputs/populations.log $output_log
#end if
    ]]></command>

    <inputs>
        <conditional name="options_usage">
            <param name="input_type" type="select" label="Input type" help="select input file type" >
                <option value="stacks">Stacks output</option>
                <option value="vcf">VCF file</option>
            </param>
            <when value="stacks">
                <param name="input_col" format="tabular,txt" type="data_collection" collection_type="list" label="Output from previous Stacks pipeline steps (e.g. gstacks, denovo_map, or refmap)" argument="-P" />
            </when>
            <when value="vcf">
                <param name="input_vcf" format="vcf" type="data" label="VCF file" argument="-V" />
            </when>
        </conditional>
        <param name="popmap" type="data" format="tabular,txt" label="Specify a population map" argument="-M" help="Format is 'SAMPLE1 \t POP1 \n SAMPLE2 ...'." optional="true"/>
        <param argument="--batch_size" type="integer" value="" optional="true" label="number of loci to process in a batch"  help="(default: 10,000 in de novo mode; in reference mode, one chromosome per batch). Increase to speed analysis, uses more memory, decrease to save memory)"/>

        <!-- Data Filtering -->
        <section name="options_filtering" title="Data filtering options" expanded="true">

            <param name="minperc" argument="-r" type="float" value="0.0" min="0" max="1" label="Minimum percentage of individuals in a population required to process a locus for that population" />
            <param name="minpop" argument="-p" type="integer" value="1" label="Minimum number of populations a locus must be present in to process a locus" />
            <param name="minminor" argument="--min_maf" type="float" value="0" min="0" max="0.5" label="minimum minor allele frequency" help="specify a minimum minor allele frequency required to process a nucleotide site at a locus" />
            <param argument="--min_mac" type="integer" value="0" min="0" label="minimum minor allele count" help="specify a minimum minor allele count required to process a nucleotide site at a locus" />
            <param argument="--max_obs_het" type="float" value="" min="0" max="1" optional="true" label="Maximum observed heterozygosity required to process a nucleotide site at a locus." />
            <!-- deprecated https://groups.google.com/forum/#!msg/stacks-users/jdC7gw_MuK4/1v0FG3u7AwAJ 
            <param name="lnl" type="float" value="" optional="true" argument="\-\-lnl_lim" label="Filter loci with log likelihood values below this threshold" />-->
            <param name="filter_single_snp" type="select" label="Analyse all SNPs per locus" >
                <option value="">yes</option>
                <option value="--write_single_snp">No: Analyse only the first SNP (--write_single_snp)</option>
                <option value="--write_random_snp">No: Analyse only one random SNP (--write_random_snp)</option>
            </param>
            <param name="whitelist" argument="-W" format="txt,tabular" type="data" optional="true" label="Specify a file containing markers to include in the export" />
            <param name="blacklist" argument="-B" format="txt,tabular" type="data" optional="true" label="Specify a file containing markers to exclude from the export" />
        </section>

        <!-- merging and Phasing -->
        <section name="merge_phase" title="Merging and Phasing" expanded="true">
            <param name="enzyme" argument="-e" type="select" label="Provide the restriction enzyme used" help="required if generating genomic output" >
                <expand macro="enzymes"/>
            </param>
            <param argument="--merge_sites" truevalue="--merge_sites" falsevalue="" type="boolean" checked="false" label="merge loci that were produced from the same restriction enzyme cutsite" help="(requires reference-aligned data)" />
            <param argument="--merge_prune_lim" type="float" value="1.0" min="0.0" max="1.0" label="for merging adjacent loci: fraction of samples possessing both loci to prune remaining samples from analysis" />
        </section>

        <!-- Locus stats -->
        <section name="locus_stats" title="Locus Stats" expanded="true">
            <param argument="--hwe" truevalue="--hwe" falsevalue="" type="boolean" checked="false" label="calculate divergence from Hardy-Weinberg equilibrium for each locus" />
        </section>

        <!-- Fstats -->
        <conditional name="fstats_conditional">
            <param name="fstats" argument="--fstats" type="select" label="Enable SNP and haplotype-based F statistics" >
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="no"/>
            <when value="yes">
                <conditional name="correction_select">
                    <param name="correction" type="select" label="Correction type" help="specify a correction to be applied to Fst values" >
                        <option value="no_corr">No correction</option>
                        <option value="p_value">p_value</option>
                        <option value="bonferroni_win">bonferroni_win</option>
                        <option value="bonferroni_gen">bonferroni_gen</option>
                    </param>
                    <when value="no_corr"/>
                    <when value="p_value">
                        <param name="pcutoff" type="float" value="0.05" label="P-value cutoff" help="required p-value to keep an Fst measurement (0.05 by default). Also used as base for Bonferroni correction" />
                    </when>
                    <when value="bonferroni_win">
                        <param name="pcutoff" type="float" value="0.05" label="P-value cutoff" help="required p-value to keep an Fst measurement (0.05 by default). Also used as base for Bonferroni correction" />
                    </when>
                    <when value="bonferroni_gen">
                        <param name="pcutoff" type="float" value="0.05" label="P-value cutoff" help="required p-value to keep an Fst measurement (0.05 by default). Also used as base for Bonferroni correction" />
                    </when>
                </conditional>
            </when>
        </conditional>

        <!-- File output options -->
        <section name="populations_output" title="Output options" expanded="true">
            <param name="ordered_export" argument="--ordered_export" truevalue="--ordered_export" falsevalue="" type="boolean" checked="false" label="If data is reference aligned, exports will be ordered; only a single representative of each overlapping site." />
            <param name="fasta_loci" argument="--fasta_loci" truevalue="--fasta_loci" falsevalue="" type="boolean" checked="false" label="output locus consensus sequences in FASTA format" />
            <param name="fasta_samples" argument="--fasta_samples" truevalue="--fasta_samples" falsevalue="" type="boolean" checked="false" label="output the sequences of the two haplotypes of each (diploid) sample, for each locus, in FASTA format" />
            <param name="vcf" argument="--vcf" truevalue="--vcf" falsevalue="" type="boolean" checked="false" label="Output results in Variant Call Format (VCF)" />
            <param name="genepop" argument="--genepop" truevalue="--genepop" falsevalue="" type="boolean" checked="false" label="Output results in GenePop Format" />
            <param name="structure" argument="--structure" truevalue="--structure" falsevalue="" type="boolean" checked="false" label="Output results in Structure Format" />
            <param argument="--radpainter" truevalue="--radpainter" falsevalue="" type="boolean" checked="false" label="output results in fineRADstructure/RADpainter format" />
            <!--<param name="phase" argument="\-\-phase" truevalue="\-\-phase" falsevalue="" type="boolean" checked="false" label="Output genotypes in PHASE format" />-->
            <param name="fastphase" argument="--fastphase" truevalue="--fastphase" falsevalue="" type="boolean" checked="false" label="Output genotypes in fastPHASE format" />
            <param name="plink" argument="--plink" truevalue="--plink" falsevalue="" type="boolean" checked="false" label="Output genotypes in PLINK format" />
            <!--<param name="hzar" argument="\-\-hzar" truevalue="\-\-hzar" falsevalue="" type="boolean" checked="false" label="Output genotypes in Hybrid Zone Analysis using R (HZAR) format." />-->
            <param name="phylip" argument="--phylip" truevalue="--phylip" falsevalue="" type="boolean" checked="false" label="Output nucleotides that are fixed-within, and variant among populations in Phylip format for phylogenetic tree construction" />
            <param name="phylip_var" argument="--phylip_var" truevalue="--phylip_var" falsevalue="" type="boolean" checked="false" label="Include variable sites in the phylip output encoded using IUPAC notation." />
            <!--<param name="phylip_var_all" argument="\-\-phylip_var_all" truevalue="\-\-phylip_var_all" falsevalue="" type="boolean" checked="false" label="Include all sequence as well as variable sites in the phylip output encoded using IUPAC notation." />
            <param name="treemix" argument="\-\-treemix" truevalue="\-\-treemix" falsevalue="" type="boolean" checked="false" label="Output SNPs in a format useable for the TreeMix program (Pickrell and Pritchard)." />-->
            <param argument="--no_hap_exports" truevalue="--no_hap_exports" falsevalue="" type="boolean" checked="false" label="omit haplotype outputs" />
            <param argument="--fasta_samples_raw" truevalue="--fasta_samples_raw" falsevalue="" type="boolean" checked="false" label="output all haplotypes observed in each sample, for each locus, in FASTA format" />
        </section>

        <!-- Kernel-smoothing algorithm -->
        <section name="kernel_smoothing" title="Kernel smoothing" expanded="false">
            <conditional name="options_kernel">
                <param name="kernel" type="select" label="enable kernel-smoothed calculations" >
                    <option value="">No</option>
                    <option value="-k">For Pi, Fis, Fst, Fst', and Phi_st</option>
                    <option value="--smooth_fstats">For Fst, Fst', and Phi_st</option>
                    <option value="--smooth_popstats">For Pi and Fis</option>
                </param>
                <when value=""/>
                <when value="-k">
                    <param argument="--sigma" type="float" value="150000" label="standard deviation of the kernel smoothing weight distribution" help="distance over which to average values (default 150Kb)" />
                </when>
                <when value="--smooth_fstats">
                    <param argument="--sigma" type="float" value="150000" label="standard deviation of the kernel smoothing weight distribution" help="distance over which to average values (default 150Kb)" />
                </when>
                <when value="--smooth_popstats">
                    <param argument="--sigma" type="float" value="150000" label="standard deviation of the kernel smoothing weight distribution" help="distance over which to average values (default 150Kb)" />
                </when>
            </conditional>
            <conditional name="bootstrap_resampling_mode">
                <param name="bootstrap_all" argument="--bootstrap" type="select" label="Enable bootstrap resampling for all smoothed statistics" >
                    <option value="">No</option>
                    <option value="--bootstrap">Yes</option>
                </param>
                <when value="--bootstrap">
                </when>
                <when value="">
                    <param name="bootstrap_pifis" argument="--bootstrap_pifis" type="boolean" checked="false" truevalue="--bootstrap_pifis" falsevalue="" label="Enable boostrap resampling for smoothed SNP-based Pi and Fis calculations" />
                    <param name="bootstrap_fst" argument="--bootstrap_fst" type="boolean" checked="false" truevalue="--bootstrap_fst" falsevalue="" label="Enable boostrap resampling for smoothed Fst calculations based on pairwise population comparison of SNPs" />
                    <param name="bootstrap_div" argument="--bootstrap_div" type="boolean" checked="false" truevalue="--bootstrap_div" falsevalue="" label="Enable boostrap resampling for smoothed haplotype diveristy and gene diversity calculations based on haplotypes" />
                    <param name="bootstrap_phist" argument="--bootstrap_phist" type="boolean" checked="false" truevalue="--bootstrap_phist" falsevalue="" label="Enable boostrap resampling for smoothed Phi_st calculations based on haplotypes." />
                </when>
            </conditional>
            <param name="bootstrap_reps" argument="--bootstrap_reps" type="integer" value="100" optional="true" label="Number of bootstrap resamplings to calculate" />
            <param name="bootstrap_wl" argument="--bootstrap_wl" format="txt,tabular" type="data" optional="true" label="Only bootstrap loci contained in this whitelist" />
        </section>

        <!-- Output options -->
        <section name="advanced_options" title="Advanced options" expanded="False">
            <param argument="--log_fst_comp" type="boolean" checked="false" truevalue="--log_fst_comp" falsevalue="" label="log components of Fst/Phi_st calculations to a data set" />
        </section>
        <expand macro="in_log"/>
    </inputs>
    <outputs>
        <expand macro="out_log"/>
        <expand macro="populations_output_full"/>
    </outputs>

    <tests>
        <!-- test w gstacks output as input and default options -->
        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="catalog.calls.vcf" ftype="vcf" value="gstacks/catalog.calls.tsv" />
                    <element name="catalog.fa.gz" ftype="fasta.gz" value="gstacks/catalog.fa.gz" />
               </collection>
            </param>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap_cstacks.tsv" />
            <param name="add_log" value="yes" />
            <output ftype="txt" name="output_log" value="populations/populations.log" lines_diff="4"/>
            <output ftype="tabular" name="out_haplotypes" value="populations/populations.haplotypes.tsv"/>
            <output ftype="tabular" name="out_hapstats" value="populations/populations.hapstats.tsv"/>
            <output ftype="txt" name="out_populations_log_distribs" value="populations/populations.log.distribs"/>
            <output ftype="tabular" name="out_sumstats_sum" value="populations/populations.sumstats_summary.tsv"/>
            <output ftype="tabular" name="out_sumstats" value="populations/populations.sumstats.tsv"/>
            <output ftype="tabular" name="out_sql" value="populations/populations.markers.tsv"/>
        </test>
        <!-- test w gstacks output as input, wo popmap, and default options -->
        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="catalog.calls.vcf" ftype="vcf" value="gstacks/catalog.calls.tsv" />
                    <element name="catalog.fa.gz" ftype="fasta.gz" value="gstacks/catalog.fa.gz" />
               </collection>
            </param>
            <param name="add_log" value="yes" />
            <output ftype="txt" name="output_log"><assert_contents><has_text text="Populations is done." /></assert_contents></output>
        </test>
        <!-- test w gstacks output as input and + all outputs -->
        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="catalog.calls.vcf" ftype="vcf" value="gstacks/catalog.calls.tsv" />
                    <element name="catalog.fa.gz" ftype="fasta.gz" value="gstacks/catalog.fa.gz" />
               </collection>
            </param>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap_cstacks.tsv" />
            <param name="add_log" value="yes" />
            <param name="advanced_options|log_fst_comp" value="yes"/>
            <param name="fstats_conditional|fstats" value="yes"/>
            <param name="populations_output|fasta_loci" value="yes"/>
            <param name="populations_output|fasta_samples" value="yes"/>
            <param name="populations_output|fasta_samples_raw" value="yes"/>
            <param name="populations_output|phylip" value="yes"/>
            <param name="populations_output|phylip_var" value="yes"/>
            <param name="populations_output|genepop" value="yes"/>
            <param name="populations_output|vcf" value="yes"/>
            <param name="populations_output|plink" value="yes"/>
            <param name="populations_output|structure" value="yes"/>
            <param name="populations_output|radpainter" value="yes"/>
            <assert_command>
                <has_text text="--log_fst_comp" />
            </assert_command>
            <output ftype="txt" name="output_log"><assert_contents><has_text text="Populations is done." /></assert_contents></output>
            <output ftype="tabular" name="out_haplotypes" value="populations/populations.haplotypes.tsv"/>
            <output ftype="tabular" name="out_hapstats" value="populations/populations.hapstats.tsv"/>
            <output ftype="txt" name="out_populations_log_distribs" value="populations/populations.log.distribs" lines_diff="2"/>
            <output ftype="tabular" name="out_sumstats_sum" value="populations/populations.sumstats_summary.tsv"/>
            <output ftype="tabular" name="out_sumstats" value="populations/populations.sumstats.tsv"/>
            <output ftype="tabular" name="out_sql" value="populations/populations.markers.tsv"/>

            <output ftype="tabular" name="out_phistats" value="populations/populations.phistats.tsv"/>
            <output ftype="tabular" name="out_phistats_sum" value="populations/populations.phistats_summary.tsv"/>
            <output ftype="tabular" name="out_fststats_sum" value="populations/populations.fst_summary.tsv"/>
            <output ftype="tabular" name="out_fasta_strict" value="populations/populations.loci.fa" lines_diff="2"/>
            <output ftype="tabular" name="out_fasta" value="populations/populations.samples.fa" lines_diff="2"/>
            <output ftype="tabular" name="out_fasta_raw" value="populations/populations.samples-raw.fa" lines_diff="2"/>
            <output ftype="tabular" name="out_phylip_all_pop_fix" value="populations/populations.fixed.phylip" lines_diff="2"/>
            <output ftype="tabular" name="out_phylip_all_loci_fix" value="populations/populations.fixed.phylip.log" lines_diff="2"/>
            <output ftype="tabular" name="out_phylip_all_pop_var" value="populations/populations.var.phylip" lines_diff="2"/>
            <output ftype="tabular" name="out_phylip_all_loci_var" value="populations/populations.var.phylip.log" lines_diff="2"/>
            <output ftype="tabular" name="out_genepop_snps" value="populations/populations.snps.genepop" lines_diff="2"/>
            <output ftype="tabular" name="out_genepop_haps" value="populations/populations.haps.genepop" lines_diff="2"/>
            <output ftype="vcf" name="out_vcf_haplotypes_snps" value="populations/populations.snps.vcf" lines_diff="2"/>
            <output ftype="vcf" name="out_vcf_haplotypes_haps" value="populations/populations.haps.vcf" lines_diff="2"/>
            <output ftype="tabular" name="out_plink_markers" value="populations/populations.plink.map" lines_diff="2"/>
            <output ftype="tabular" name="out_plink_genotypes" value="populations/populations.plink.ped" lines_diff="2"/>
            <output ftype="tabular" name="out_structure" value="populations/populations.structure" lines_diff="2"/>
            <output ftype="tabular" name="out_radpainter" value="populations/populations.haps.radpainter"/>
        </test>
        <!-- test w vcf input and default options, just checking if finished -->
        <test>
            <param name="options_usage|input_type" value="vcf" />
            <param name="options_usage|input_vcf" ftype="vcf" value="gstacks/catalog.calls.tsv"/>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap_cstacks.tsv" />
            <param name="add_log" value="yes" />
            <output ftype="txt" name="output_log"><assert_contents><has_text text="Populations is done." /></assert_contents></output>
        </test>
        <!-- test w gstacks output as input and non default filtering -->
        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="catalog.calls.vcf" ftype="vcf" value="gstacks/catalog.calls.tsv" />
                    <element name="catalog.fa.gz" ftype="fasta.gz" value="gstacks/catalog.fa.gz" />
               </collection>
            </param>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap_cstacks.tsv" />
            <param name="add_log" value="yes" />
            <section name="options_filtering">
                <param name="minperc" value="0.1"/>
                <param name="minpop" value="2"/>
                <param name="minminor" value="0.01" />
                <param name="min_mac" value="1"/>
                <param name="max_obs_het" value="0.8" />
                <param name="filter_single_snp" value="--write_random_snp"/>
                <param name="blacklist" value="blacklist.tsv" ftype="tabular" />
            </section>
            <assert_command>
                <has_text text="-r 0.1" />
                <has_text text="-p 2" />
                <has_text text="--min_maf 0.01" />
                <has_text text="--min_mac 1" />
                <has_text text="--max_obs_het 0.8" />
                <has_text text="--write_random_snp" />
                <has_text text="-B " />
            </assert_command>
            <output ftype="txt" name="output_log"><assert_contents><has_text text="Populations is done." /></assert_contents></output>
        </test>
        <!-- test w gstacks output as input and non default merging/hwe -->
        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="catalog.calls.vcf" ftype="vcf" value="gstacks/catalog.calls.tsv" />
                    <element name="catalog.fa.gz" ftype="fasta.gz" value="gstacks/catalog.fa.gz" />
               </collection>
            </param>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap_cstacks.tsv" />
            <section name="merge_phase">
                <param name="enzyme" value="ecoRI"/>
                <param name="merge_sites" value="yes"/>
                <param name="merge_prune_lim" value="0.9" />
            </section>
            <section name="locus_stats">
                <param name="hwe" value="yes" />
            </section>
            <param name="add_log" value="yes" />
            <assert_command>
                <has_text text="-e ecoRI" />
                <has_text text="--merge_sites" />
                <has_text text="--merge_prune_lim 0.9" />
                <has_text text="--hwe" />
            </assert_command>
            <output ftype="txt" name="output_log"><assert_contents><has_text text="Populations is done." /></assert_contents></output>
        </test>
        <!-- test w gstacks output as input and non default fstats/kernel/bootstrap -->
        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="catalog.calls.vcf" ftype="vcf" value="gstacks/catalog.calls.tsv" />
                    <element name="catalog.fa.gz" ftype="fasta.gz" value="gstacks/catalog.fa.gz" />
               </collection>
            </param>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap_cstacks.tsv" />
            <conditional name="fstats_conditional">
                <param name="fstats" value="yes" />
                <conditional name="correction_select">
                    <param name="correction" value="bonferroni_gen"/>
                    <param name="pcutoff" value="0.01" />
                </conditional>
            </conditional>
            <conditional name="options_kernel">
                <param name="kernel" value="-k" />
                <param name="sigma" value="150001" />
            </conditional>
            <conditional name="bootstrap_resampling_mode">
                <param name="bootstrap_all" value="--bootstrap" />
            </conditional>
            <param name="bootstrap_reps" value="23" />
            <param name="add_log" value="yes" />
            <assert_command>
                <has_text text="--fstats" />
                <has_text text="--fst_correction bonferroni_gen" />
                <has_text text="--p_value_cutoff 0.01" />
                <has_text text="-k " />
                <has_text text="--sigma 150001" />
                <has_text text="--bootstrap" />
                <has_text text="--bootstrap_reps 23" />
            </assert_command>
            <output ftype="txt" name="output_log"><assert_contents><has_text text="Populations is done." /></assert_contents></output>
        </test>



         <!-- TODO test wo popmap  -->

    <!--        <test>
            <param name="options_usage|input_type" value="stacks" />
            <param name="options_usage|input_col">
                <collection type="list">
                    <element name="batch_1.catalog.alleles.tsv" ftype="tabular" value="genotypes/batch_1.catalog.alleles.tsv" />
                    <element name="batch_1.catalog.snps.tsv" ftype="tabular" value="genotypes/batch_1.catalog.snps.tsv" />
                    <element name="batch_1.catalog.tags.tsv" ftype="tabular" value="genotypes/batch_1.catalog.tags.tsv" />
                    <element name="PopA_01.alleles.tsv" ftype="tabular" value="genotypes/PopA_01.alleles.tsv" />
                    <element name="PopA_01.matches.tsv" ftype="tabular" value="genotypes/PopA_01.matches.tsv" />
                    <element name="PopA_01.snps.tsv" ftype="tabular" value="genotypes/PopA_01.snps.tsv" />
                    <element name="PopA_01.tags.tsv" ftype="tabular" value="genotypes/PopA_01.tags.tsv" />
                    <element name="PopA_02.alleles.tsv" ftype="tabular" value="genotypes/PopA_02.alleles.tsv" />
                    <element name="PopA_02.matches.tsv" ftype="tabular" value="genotypes/PopA_02.matches.tsv" />
                    <element name="PopA_02.snps.tsv" ftype="tabular" value="genotypes/PopA_02.snps.tsv" />
                    <element name="PopA_02.tags.tsv" ftype="tabular" value="genotypes/PopA_02.tags.tsv" />
               </collection>
            </param>
            <param name="popmap" ftype="tabular" value="denovo_map/popmap.tsv" />
            <param name="fstats_conditional|fstat" value="yes" />
            <param name="fstats_conditional|correction_select|correction" value="p_value" />

            <param name="populations_output|ordered_export" value="true" />
            <param name="populations_output|vcf" value="true" />
            <param name="populations_output|vcf_haplotypes" value="true" />
            <param name="populations_output|genepop" value="true" />
            <param name="populations_output|structure" value="true" />
            <param name="populations_output|fasta_loci" value="true" />
            <param name="populations_output|fasta_samples" value="true" />
            <param name="populations_output|hzar" value="true" />
            <param name="populations_output|phase" value="true" />
            <param name="populations_output|fastphase" value="true" />
            <param name="populations_output|beagle" value="true" />
            <param name="populations_output|beagle_phased" value="true" />
            <param name="populations_output|plink" value="true" />
            <param name="populations_output|phylip" value="true" />
            <param name="populations_output|phylip_var" value="true" />
            <param name="populations_output|phylip_var_all" value="true" />
            <param name="populations_output|treemix" value="true" />

            <param name="merge_phase|enzyme" value="ecoRI" />

            <output name="output_summary">
                <assert_contents>
                    <has_text text="Stacks Statistics" />
                </assert_contents>
            </output>

            <output name="out_haplotypes">
                <assert_contents>
                    <has_text text="PopA_01" />
                </assert_contents>
            </output>
            <output name="out_hapstats">
                <assert_contents>
                    <has_text text="Smoothed Gene Diversity" />
                </assert_contents>
            </output>
            <output name="out_populations_log">
                <assert_contents>
                    <has_text text="populations version" />
                </assert_contents>
            </output>
            <output name="out_sumstats_sum">
                <assert_contents>
                    <has_text text="Polymorphic Sites" />
                </assert_contents>
            </output>
            <output name="out_sumstats">
                <assert_contents>
                    <has_text text="Smoothed Pi" />
                </assert_contents>
            </output>
            <output name="out_vcf">
                <assert_contents>
                    <has_text text="fileformat=VCFv4.2" />
                </assert_contents>
            </output>
            <output name="out_treemix_pop">
                <assert_contents>
                    <has_text text="TreeMix v1.1;" />
                </assert_contents>
            </output>
            <output name="out_fasta">
                <assert_contents>
                    <has_text text="AATTCGTTTGCTGCTTCAGGAATCTCTCGTATAATCTGAGTATGTGCGTACGTACGCTATTTAGATGGATAACCGACGCTGCCAGACGCGAGAC" />
                </assert_contents>
            </output>
        </test>
        <test>
            <param name="options_usage|input_type" value="vcf" />
            <param name="options_usage|input_vcf" value="populations/batch_1.vcf" />
            <param name="popmap" ftype="tabular" value="denovo_map/popmap.tsv" />
            <param name="options_filtering|correction_select|correction" value="p_value" />

            <param name="populations_output|ordered_export" value="true" />
            <param name="populations_output|vcf" value="true" />
            <param name="populations_output|vcf_haplotypes" value="true" />
            <param name="populations_output|genepop" value="true" />
            <param name="populations_output|structure" value="true" />
            <param name="populations_output|fasta_loci" value="true" />
            <param name="populations_output|fasta_samples" value="true" />
            <param name="populations_output|hzar" value="true" />
            <param name="populations_output|phase" value="true" />
            <param name="populations_output|fastphase" value="true" />
            <param name="populations_output|beagle" value="true" />
            <param name="populations_output|beagle_phased" value="true" />
            <param name="populations_output|plink" value="true" />
            <param name="populations_output|phylip" value="true" />
            <param name="populations_output|phylip_var" value="true" />
            <param name="populations_output|phylip_var_all" value="true" />
            <param name="populations_output|treemix" value="true" />

            <param name="populations_output|options_genomic|genomic" value="false" />

            <output name="output_summary">
                <assert_contents>
                    <has_text text="Stacks Statistics" />
                </assert_contents>
            </output>

            <output name="out_haplotypes">
                <assert_contents>
                    <has_text text="PopA_01" />
                </assert_contents>
            </output>
            <output name="out_hapstats">
                <assert_contents>
                    <has_text text="Smoothed Gene Diversity" />
                </assert_contents>
            </output>
            <output name="out_populations_log">
                <assert_contents>
                    <has_text text="populations version" />
                </assert_contents>
            </output>
            <output name="out_sumstats_sum">
                <assert_contents>
                    <has_text text="Polymorphic Sites" />
                </assert_contents>
            </output>
            <output name="out_sumstats">
                <assert_contents>
                    <has_text text="Smoothed Pi" />
                </assert_contents>
            </output>
            <output name="out_vcf">
                <assert_contents>
                    <has_text text="fileformat=VCFv4.2" />
                </assert_contents>
            </output>
            <output name="out_treemix_pop">
                <assert_contents>
                    <has_text text="TreeMix v1.1;" />
                </assert_contents>
            </output>
            <output name="out_fasta">
                <assert_contents>
                    <has_text text="CLocus_0_Sample_1_Locus_0_Allele_1" />
                </assert_contents>
            </output>
        </test>-->
    </tests>
    <help>
<![CDATA[
.. class:: infomark

**What it does**

This program will be executed in place of the genotypes program when a population is being processed through the pipeline. A map specifiying which individuals belong to which population is submitted to the program and the program will then calculate population genetics statistics, expected/observed heterzygosity, π, and FIS at each nucleotide position. The populations program will compare all populations pairwise to compute FST. If a set of data is reference aligned, then a kernel-smoothed FST will also be calculated.

--------

**Input files**

Output from denovo_map or ref_map

- Population map::

    indv_01    1
    indv_02    1
    indv_03    1
    indv_04    2
    indv_05    2
    indv_06    2


**Output files**

- XXX.tags.tsv file

See `Stacks output description <http://catchenlab.life.illinois.edu/stacks/manual/#files>`_

Notes: For the tags file, each stack will start in the file with a consensus sequence for the entire stack followed by the flags for that stack. Then, each individual read that was merged into that stack will follow. The next stack will start with another consensus sequence.


- XXX.snps.tsv file

See `Stacks output description <http://catchenlab.life.illinois.edu/stacks/manual/#files>`_

Notes: If a stack has two SNPs called within it, then there will be two lines in this file listing each one.


- XXX.alleles.tsv file

See `Stacks output description <http://catchenlab.life.illinois.edu/stacks/manual/#files>`_


- XXX.matches.tsv file

See `Stacks output description <http://catchenlab.life.illinois.edu/stacks/manual/#files>`_

Notes: Each line in this file records a match between a catalog locus and a locus in an individual, for a particular haplotype. The Batch ID plus the Catalog ID together represent a unique locus in the entire population, while the Sample ID and the Stack ID together represent a unique locus in an individual sample.


- other files:

See `Stacks output description <http://catchenlab.life.illinois.edu/stacks/manual/#files>`_

@STACKS_INFOS@
]]>
    </help>
    <expand macro="citation" />
</tool>
